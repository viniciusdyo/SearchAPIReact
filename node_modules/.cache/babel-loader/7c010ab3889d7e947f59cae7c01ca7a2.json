{"ast":null,"code":"import _objectSpread from\"/home/vinidy/Documents/SearchAPIReact/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/vinidy/Documents/SearchAPIReact/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _asyncToGenerator from\"/home/vinidy/Documents/SearchAPIReact/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/home/vinidy/Documents/SearchAPIReact/node_modules/@babel/runtime/regenerator/index.js\";export var loadPosts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var postsResponse,photosResponse,_yield$Promise$all,_yield$Promise$all2,posts,photos,postsJson,photosJson,postsAndPhotos;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:postsResponse=fetch('https://jsonplaceholder.typicode.com/posts');photosResponse=fetch('https://jsonplaceholder.typicode.com/photos');_context.next=4;return Promise.all([postsResponse,photosResponse]);case 4:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);posts=_yield$Promise$all2[0];photos=_yield$Promise$all2[1];_context.next=10;return posts.json();case 10:postsJson=_context.sent;_context.next=13;return photos.json();case 13:photosJson=_context.sent;postsAndPhotos=postsJson.map(function(post,index){return _objectSpread(_objectSpread({},post),{},{cover:photosJson[index].url});});return _context.abrupt(\"return\",postsAndPhotos);case 16:case\"end\":return _context.stop();}}},_callee);}));return function loadPosts(){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/vinidy/Documents/SearchAPIReact/src/utils/load-posts.js"],"names":["loadPosts","postsResponse","fetch","photosResponse","Promise","all","posts","photos","json","postsJson","photosJson","postsAndPhotos","map","post","index","cover","url"],"mappings":"8eACE,MAAO,IAAMA,CAAAA,SAAS,0FAAG,4PAEjBC,aAFiB,CAEDC,KAAK,CAAC,4CAAD,CAFJ,CAIjBC,cAJiB,CAIAD,KAAK,CAAC,6CAAD,CAJL,uBAMOE,CAAAA,OAAO,CAACC,GAAR,CAAY,CAACJ,aAAD,CAAgBE,cAAhB,CAAZ,CANP,kGAMhBG,KANgB,wBAMTC,MANS,+CAQCD,CAAAA,KAAK,CAACE,IAAN,EARD,SAQjBC,SARiB,sCASEF,CAAAA,MAAM,CAACC,IAAP,EATF,SASjBE,UATiB,eAWjBC,cAXiB,CAWAF,SAAS,CAACG,GAAV,CAAc,SAACC,IAAD,CAAOC,KAAP,CAAiB,CACpD,sCAAYD,IAAZ,MAAkBE,KAAK,CAAEL,UAAU,CAACI,KAAD,CAAV,CAAkBE,GAA3C,GACD,CAFsB,CAXA,iCAehBL,cAfgB,yDAAH,kBAATX,CAAAA,SAAS,0CAAf","sourcesContent":["\n  export const loadPosts = async () => {\n\n    const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts');\n\n    const photosResponse = fetch('https://jsonplaceholder.typicode.com/photos');\n\n    const [posts, photos] = await Promise.all([postsResponse, photosResponse]);\n\n    const postsJson = await posts.json();\n    const photosJson = await photos.json();\n\n    const postsAndPhotos = postsJson.map((post, index) => {\n      return { ...post, cover: photosJson[index].url }\n    });\n\n    return postsAndPhotos;\n  }"]},"metadata":{},"sourceType":"module"}